[tool.poetry]
name = "cupcake"
version = "21.2.6"
description = "Miscellaneous collection of Python and R scripts for processing Iso-Seq data"
authors = ["Elizabeth Tseng <etseng@pacb.com>"]
license = "BSD3"
homepage = "https://github.com/Magdoll/cDNA_Cupcake"
repository = "https://github.com/Magdoll/cDNA_Cupcake"
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
keywords = ["isoseq", "rnaseq", "pacbio", "long reads"]
readme = "README.md"
# packages = [
#     # {include = "src/cupcake"},
#     {include = "tests/test_data/*.*", format = "sdist"},
#     ]
include = [
    # C extensions must be included in the wheel distributions
    {path = "src/cupcake/tofu/branch/*.pyx", format = "wheel"},
    {path = "src/cupcake/tofu/branch/*.c", format = "wheel"},
    {path = "src/cupcake/tofu/branch/*.so", format = "wheel"},
    {path = "src/cupcake/tofu/branch/*.pyd", format = "wheel"},
]

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.poetry.urls]
"bug tracker" = "https://github.com/Magdoll/cDNA_Cupcake/issues"

[tool.poetry.dependencies]
python = ">=3.7.1,<4.0.0"
numpy = "^1.20.1"
biopython = "^1.78"
bx-python = "^0.8.9"
pandas = "^1.2.2"
Cython = "^0.29.21"
scikit-learn = "^0.24.1"
pysam = "^0.16.0"
bcbio-gff = "^0.6.6"
# pyvcf = {git = "https://github.com/milescsmith/PyVCF"}
typer = "^0.3.2"
parasail = "^1.2.4"
vcfpy = "^0.13.3"
coloredlogs = "^15.0"
tqdm = "^4.60.0"

[tool.poetry.dev-dependencies]

[build-system]
requires = ["poetry-core>=1.0.0", "cython", "numpy", "toml", "setuptools"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
evaluate_alignment_sam      = "cupcake.annotation.alignment_stats_from_sam:app"
make_file_for_subsample     = "cupcake.annotation.make_file_for_subsampling_from_collapsed:app"
parse_matchAnnot            = "cupcake.annotation.parse_matchAnnot:app"
subsample_with_category     = "cupcake.annotation.subsample_with_category:app"
subsample                   = "cupcake.annotation.subsample:app"
# tofu submodule
collapse_isoforms_by_sam    = "cupcake.tofu.collapse_isoforms_by_sam:app"
get_abundance_post_collapse = "cupcake.tofu.get_abundance_post_collapse:app"
filter_by_count             = "cupcake.tofu.filter_by_count:app"
filter_away_subset          = "cupcake.tofu.filter_away_subset:app"
fusion_finder               = "cupcake.tofu.fusion_finder:app"
chain_samples               = "cupcake.tofu.counting.chain_samples:app"
chain_fusion_samples        = "cupcake.tofu.counting.chain_fusion_samples:app"
summarize_junctions         = "cupcake.tofu.counting.summarize_sample_GFF_junctions:app"
scrub_sample_GFFs           = "cupcake.tofu.counting.scrub_sample_GFF_junctions:app"
simple_stats_post_collapse  = "cupcake.tofu.simple_stats_post_collapse:app"
fusion_collate_info         = "cupcake.tofu.fusion_collate_info:app"
color_bed12_post_sqanti     = "cupcake.tofu.color_bed12_post_sqanti:app"

make_fake_genome            = "cupcake.phasing.create_fake_genome:app"
run_phaser                  = "cupcake.phasing.run_phaser:app"

fa2fq                       = "cupcake.sequence.fa2fq:app"
fq2fa                       = "cupcake.sequence.fq2fa:app"
get_seq_stats               = "cupcake.sequence.get_seq_stats:app"
rev_comp                    = "cupcake.sequence.revcomp:app"
get_seqs_from_list          = "cupcake.sequence.get_seqs_from_list:app"
err_correct_w_genome        = "cupcake.sequence.err_correct_w_genome:app"
group_ORF_sequences         = "cupcake.sequence.group_ORF_sequences:app"

[tool.commitizen]
name = "cz_conventional_commits"
version = "21.0.5"
tag_format = "$version"

[tool.poetry]
name = "cupcake"
version = "19.1.0"
description = "Miscellaneous collection of Python and R scripts for processing Iso-Seq data"
authors = ["Elizabeth Tseng <etseng@pacb.com>"]
license = "BSD3"
homepage = "https://github.com/Magdoll/cDNA_Cupcake"
repository = "https://github.com/Magdoll/cDNA_Cupcake"
classifiers=[
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: BSD License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Operating System :: MacOS :: MacOS X",
    "Operating System :: POSIX :: Linux",
    "Topic :: Scientific/Engineering :: Bio-Informatics",
]
keywords = ["isoseq", "rnaseq", "pacbio", "long reads"]
readme = "README.md"
# packages = [
#     # {include = "src/cupcake"},
#     {include = "tests/test_data/*.*", format = "sdist"},
#     ]
include = [
    # C extensions must be included in the wheel distributions
    {path = "src/cupcake/tofu/branch/*.pyx", format = "wheel"},
    {path = "src/cupcake/tofu/branch/*.c", format = "wheel"},
    {path = "src/cupcake/tofu/branch/*.so", format = "wheel"},
    {path = "src/cupcake/tofu/branch/*.pyd", format = "wheel"},
]

[tool.poetry.urls]
"bug tracker" = "https://github.com/Magdoll/cDNA_Cupcake/issues"

[tool.poetry.dependencies]
python = ">=3.7.1"
numpy = "^1.20.1"
biopython = "^1.78"
bx-python = "^0.8.9"
pandas = "^1.2.2"
Cython = "^0.29.21"
scikit-learn = "^0.24.1"
pysam = "^0.16.0"
bcbio-gff = "^0.6.6"
pyvcf = "*"
# pyvcf = {git = "https://github.com/milescsmith/PyVCF"}
pbcommand = {git = "https://github.com/PacificBiosciences/pbcommand"}
pbcore = {git = "https://github.com/PacificBiosciences/pbcore"}
pbcoretools = {git = "https://github.com/PacificBiosciences/pbcoretools"}
typer = "^0.3.2"

[tool.poetry.dev-dependencies]
black = "^20.8b1"
ipython = "^7.20.0"
pylint = "^2.6.2"
flake8 = "^3.8.4"
mypy = "^0.800"

[build-system]
requires = ["poetry-core>=1.0.0", "cython", "numpy"]
build-backend = "poetry.core.masonry.api"

[tool.poetry.scripts]
evaluate_alignment_sam      = "cupcake.annotation.alignment_stats_from_sam:main"
make_file_for_subsample     = "cupcake.annotation.make_file_for_subsampling_from_collapsed:main"
parse_matchAnnot            = "cupcake.annotation.parse_matchAnnot:main"
subsample_with_category     = "cupcake.annotation.subsample_with_category:main"
subsample                   = "cupcake.annotation.subsample:main"
# tofu submodule
collapse_isoforms_by_sam    = "cupcake.tofu.collapse_isoforms_by_sam:main"
get_abundance_post_collapse = "cupcake.tofu.get_abundance_post_collapse:main"
filter_by_count             = "cupcake.tofu.filter_by_count:main"
filter_away_subset          = "cupcake.tofu.filter_away_subset:main"
fusion_finder               = "cupcake.tofu.fusion_finder:main"
chain_samples               = "cupcake.tofu.counting.chain_samples:main"
chain_fusion_samples        = "cupcake.tofu.counting.chain_fusion_samples:main"
summarize_junctions         = "cupcake.tofu.counting.summarize_sample_GFF_junctions:main"
scrub_sample_GFFs           = "cupcake.tofu.counting.scrub_sample_GFF_junctions:main"
# uh phasing! are we still doing phasing?
make_fake_genome            = "cupcake.phasing.create_fake_genome:main"
simple_stats_post_collapse  = "cupcake.tofu.simple_stats_post_collapse:main"
fusion_collate_info         = "cupcake.tofu.fusion_collate_info:main"
color_bed12_post_sqanti     = "cupcake.tofu.color_bed12_post_sqanti:main"
run_phaser                  = "cupcake.phasing.run_phaser:main"

[tool.poetry.build]
generate-setup-file = false
script = "build.py"

[tool.flakehell]
# optionally inherit from remote config (or local if you want)
base = "https://raw.githubusercontent.com/life4/flakehell/master/pyproject.toml"
# specify any flake8 options. For example, exclude "example.py":
exclude = ["example.py"]
# make output nice
# format = "grouped"
# 80 chars aren't enough in 21 century
max_line_length = 90
# show line of source code in output
show_source = true

[tool.flakehell.plugins]
flake8-bandit = ["+*"]
flake8-bugbear = ["-B950"]
flake8-builtins = ["+*"]
pylint = ["+*", "-C0103", "-C0116", "-C901", "-E203", "-E401", "-E501", "-E266", "-F401", "-F403", "-R0913", "-R0914", "-W503", "-W1203", "-W1309"]
# wemake-python-styleguide = ["+*", "-WPS305", "-WPS221", "-WPS111", "-WPS231", "-WPS326", "-WPS337", "-WPS336", "-WPS528", "-WPS529"]
flake8-broken-line = ["+*"]
flake8-commas = ["+*"]
flake8-comprehensions = ["+*"]
# flake8-darglint = ["+*", "-DAR101"]
flake8-debugger = ["+*"]
# flake8-docstrings = ["+*"]
flake8-eradicate = ["+*", "-E800"]
flake8-isort = ["+*"]
# flake8-rst-docstrings = ["+*"]
# flake8-string-format = ["+*"]
# mccabe = ["+*"]
# pep8-naming = ["+*"]
pycodestyle = ["+*","-E203", "-E401", "-E501", "-E266", "-W503", "-W1203", "-W1309"]
pyflakes = ["+*"]

# match by prefix
[tool.flakehell.exceptions."tests/"]
pycodestyle = ["-*"]     # disable a check
pyflakes = ["-*"]           # disable a plugin

[tool.flakehell.exceptions."tests/test_example.py"]
pyflakes = ["+*"]           # enable a plugin

# match by glob
[tool.flakehell.exceptions."**/test_*.py"]
pyflakes = ["-*"]